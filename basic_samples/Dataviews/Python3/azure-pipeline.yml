variables:
- group: LocalServer
- name: projpath
  value: /basic_samples/Dataviews/Python3
- name: CredFile
  value: config.ini
- name: CredFileLibrary
  value: prod_config_dataview.ini
- name: testpath
  value: /basic_samples/Dataviews/Python3
- name: job
  value: DataviewPy

jobs:      
- job: DataviewPy

  pool:
    vmImage: 'Ubuntu-16.04'
  steps :
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python_version)
        architecture: 'x64'

    # Download Secure File
    # Download a secure file to a temporary location on the build or release agent
    - task: DownloadSecureFile@1
      inputs:
        secureFile: $(CredFileLibrary)


    # Copy Files
    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
    - task: CopyFiles@2
      inputs:
        sourceFolder: $(Agent.TempDirectory)
        contents: $(CredFileLibrary)
        targetFolder: '$(Build.SourcesDirectory)$(projpath)/'
        #cleanTargetFolder: false # Optionalbasic_samples\Dataviews\Python3
        overWrite: true # Optional
        #flattenFolders: false # Optional
      displayName: copy file

    - script: |
        mv $(CredFileLibrary) $(CredFile)
      workingDirectory: $(Build.SourcesDirectory)$(projpath)/
      displayName: 'rename config file'

      
    - script: |
        pip install setuptools wheel
        pip install unittest-xml-reporting    
        pip install pytest
        pip install pytest-cov
      displayName: 'Install tools'
      
      
    - script: |
        pip install -r requirements.txt
      workingDirectory: $(Build.SourcesDirectory)$(testpath)/
      displayName: 'Install requirements'
      
    - script: |
        python -m pytest ./program.py
      displayName: 'Test with pytest'
      workingDirectory: $(Build.SourcesDirectory)$(testpath)/

- job: DataviewPy_COV

  pool:
    name: 00-OSIManaged-Test
    demands: USERNAME -equals $(LocalServer)

  steps:
  - script: 'if not exist $(covFolder) mkdir $(covFolder)'
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)'
    displayName: 'make dir '
    continueOnError: true

  - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../ '
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)/$(covFolder)'
    displayName: 'build '

  - script: '"$(covPath)cov-analyze" --dir . '
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)/$(covFolder)'
    displayName: 'analyze '

  - script: '"$(covPath)cov-commit-defects" --stream "Engineering Incubation - $(job)" --host $(coverity_server) --https-port 8443 --auth-key-file "$(covAuthPath)" --dir . '
    workingDirectory: '$(Build.SourcesDirectory)$(projpath)/$(covFolder)'
    displayName: 'upload '
