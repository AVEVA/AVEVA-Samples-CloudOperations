using System;
using System.Threading;
using AuthorizationCodeFlow;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace AuthorizationCodeFlowTest
{
    public class OpenTestBrowser : IOpenBrowser
    {
        public void OpenBrowser(string address, string userName, string password)
        {
            // Automatic login works against Microsoft personal account option only
            // Must use Live account email that isn't also an AAD account
            // Account must have no 2FA enabled and the login flow must not have any other additional prompts after password entry
            ChromeOptions options = new ChromeOptions();
            options.AddArgument("--allow-insecure-localhost");
            options.AddArgument("--headless");
            options.AddArgument("--no-sandbox");

            using IWebDriver driver = new ChromeDriver(Environment.ExpandEnvironmentVariables("%CHROMEWEBDRIVER%"), options)
            {
                Url = address,
            };
            int sleep = 5000;

            Thread.Sleep(sleep);

            driver.FindElement(By.XPath("descendant::a[@title=\"Personal Account\"]")).Click();

            Thread.Sleep(sleep);

            driver.FindElement(By.XPath("//*[@id=\"i0116\"]")).SendKeys(userName);
            driver.FindElement(By.XPath("//*[@id=\"idSIButton9\"]")).Click();

            Thread.Sleep(sleep);

            driver.FindElement(By.XPath("//*[@id=\"i0118\"]")).SendKeys(password);
            driver.FindElement(By.XPath("//*[@id=\"idSIButton9\"]")).Click();

            Thread.Sleep(sleep);

            try
            {
                // Login may or may not prompt to save credentials, use try/catch.
                driver.FindElement(By.XPath("//*[@id=\"idSIButton9\"]")).Click();
            }
            catch (NoSuchElementException) { }

            driver.Close();
        }
    }
}
