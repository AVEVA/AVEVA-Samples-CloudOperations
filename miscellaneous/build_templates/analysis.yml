parameters:
  language: ''
  web: false
  lib: false
  skipBinSkim: false

jobs:
  - job: Analysis
    pool:
      name: 00-OSIManaged-Test
      demands: COMPUTERNAME -equals $(buildAgent)
    steps:
      # Build Sample
      # - DotNet
      # - Note: --ignore-failed-sources is sometimes necessary for build agent to overcome old
      #         cached NuGet sources that no longer exist on the machine
      - script: |
          echo Clean
          call dotnet clean
          echo Restore
          call dotnet restore --ignore-failed-sources
          echo Build
          call dotnet msbuild -p:HIGHENTROPYVA=true
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (DotNet)'
        condition: eq('${{ parameters.language }}', 'dotnet')

      # - Java
      - script: |
          echo Install
          call mvn install -f pom.xml -DskipTests
          echo Compile
          call mvn compile
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(libPath)/
        displayName: 'Build (Java): Library'
        condition: and(eq('${{ parameters.language }}', 'java'), eq(${{ parameters.lib }}, false))
      - script: |
          echo Install
          call mvn install -f pom.xml -DskipTests
          echo Compile
          call mvn compile
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (Java)'
        condition: eq('${{ parameters.language }}', 'java')

      # - Python
      - script: |
          echo Install tools
          call pip install setuptools wheel
          call pip install unittest-xml-reporting    
          call pip install pytest
          call pip install pytest-cov
          echo Requirements
          call pip install -r requirements.txt
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (Python): Install dependencies'
        condition: and(eq('${{ parameters.language }}', 'python'), eq(${{ parameters.lib }}, false))
      - script: |
          echo Install tools
          call pip install wheel
          call pip install twine
          echo Build library
          call python setup.py sdist bdist_wheel
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (Python Library)'
        condition: and(eq('${{ parameters.language }}', 'python'), eq(${{ parameters.lib }}, true))

      # - Angular
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Build (Angular): Specify Node version'
        condition: eq('${{ parameters.language }}', 'angular')
      - script: |
          echo Angular CLI
          call npm install -g @angular/cli
          echo NPM CI
          call npm ci
          echo Build
          call npm run build
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (Angular)'
        condition: eq('${{ parameters.language }}', 'angular')

      # - NodeJS
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Build (NodeJS): Specify Node version'
        condition: eq('${{ parameters.language }}', 'nodejs')
      - script: npm ci
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (NodeJS): Install dependencies'
        condition: eq('${{ parameters.language }}', 'nodejs')

      # - PowerBI
      - script: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\Tools\VsDevCmd.bat" & "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin\MSBuild.exe"
          dir
          dir bin
          dir bin\Debug
          call copy /y "$(Build.SourcesDirectory)$(projPath)\bin\Debug\OCSConnector.mez" "C:\Users\$(username)\Documents\Power BI Desktop\Custom Connectors"
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Build (PowerBI)'
        condition: eq('${{ parameters.language }}', 'powerbi')

      # BinSkim
      - task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-binskim.BinSkim@3
        displayName: 'BinSkim (DotNet): Analyze'
        inputs:
          AnalyzeTarget: '$(Build.SourcesDirectory)\*.dll;$(Build.SourcesDirectory)\*.exe'
          toolVersion: LatestPreRelease
        condition: and(eq('${{ parameters.language }}', 'dotnet'), eq(${{ parameters.skipBinSkim }}, false))

      - task: ms-codeanalysis.vss-microsoft-security-code-analysis-devops.build-task-postanalysis.PostAnalysis@1
        displayName: 'BinSkim (DotNet): Post-Analysis'
        inputs:
          BinSkim: true
          BinSkimBreakOn: WarningAbove
        condition: and(eq('${{ parameters.language }}', 'dotnet'), eq(${{ parameters.skipBinSkim }}, false))

      # Synopsys
      # Needs Pip < 20 due to issue described in https://github.com/blackducksoftware/synopsys-detect/pull/107
      - script: call python -m pip install pip==19.3.1
        condition: and(succeeded(), eq('${{ parameters.language }}', 'python'))
        displayName: 'Synopsys (Python): Install pip 19.3.1'

      - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
        inputs:
          Products: BD
          BlackDuckService: 'product-readiness.BlackDuck'
          DetectArguments: |
            --detect.project.name="product-readiness.$(bdProject)"
            --detect.project.version.name="$(Build.SourceBranchName)"
            --detect.source.path=$(Build.SourcesDirectory)$(projPath)/
            --detect.code.location.name="code_location_$(bdProject)_$(Build.SourceBranchName)"
            --detect.bom.aggregate.name="bom_$(bdProject)_$(Build.SourceBranchName)"
        condition: and(succeeded(), or(ne('${{ parameters.language }}', 'python'), eq(${{ parameters.lib }}, true)))
        displayName: 'Synopsys: Detect'

      - task: synopsys-detect.synopsys-detect.synopsys-detect-task.SynopsysDetectTask@2
        inputs:
          Products: BD
          BlackDuckService: 'product-readiness.BlackDuck'
          DetectArguments: |
            --detect.project.name="product-readiness.$(bdProject)"
            --detect.project.version.name="$(Build.SourceBranchName)"
            --detect.source.path=$(Build.SourcesDirectory)$(projPath)/
            --detect.code.location.name="code_location_$(bdProject)_$(Build.SourceBranchName)"
            --detect.bom.aggregate.name="bom_$(bdProject)_$(Build.SourceBranchName)"
            --detect.pip.requirements.path=$(Build.SourcesDirectory)$(projPath)/requirements.txt
        condition: and(succeeded(), and(eq('${{ parameters.language }}', 'python'), eq(${{ parameters.lib }}, false)))
        displayName: 'Synopsys: Detect (Python Requirements.txt)'

      # Coverity
      - script: if not exist $(covFolder) mkdir $(covFolder)
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Coverity: Make dir'
        continueOnError: true

      # - DotNet
      - script: |
          echo Clean
          call dotnet clean
          echo Restore
          call dotnet restore
          echo Build
          "$(covPath)cov-build" --dir $(covFolder) dotnet build
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Coverity (DotNet): Build'
        condition: eq('${{ parameters.language }}', 'dotnet')

      # - Java
      - script: |
          echo Clean
          call mvn clean
          echo Build
          "$(covPath)cov-build" --dir $(covFolder) mvn compile
          echo Complete
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/
        displayName: 'Coverity (Java): Build'
        condition: eq('${{ parameters.language }}', 'java')

      # - Angular
      - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../src'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity (Angular): Build'
        condition: eq('${{ parameters.language }}', 'angular')

      # - Default
      - script: '"$(covPath)cov-build" --dir . --no-command --fs-capture-search ../'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity (Default): Build'
        condition: and(ne('${{ parameters.language }}', 'angular'), or(and(ne('${{ parameters.language }}', 'dotnet'), ne('${{ parameters.language }}', 'java')), eq(${{ parameters.web }}, true)))

      - script: '"$(covPath)cov-analyze" --dir .'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity: Analyze'

      - script: '"$(covPath)cov-commit-defects" --stream "Engineering Incubation - $(covStream)" --host $(covServer) --https-port 8443 --auth-key-file "$(covAuthPath)" --dir .'
        workingDirectory: $(Build.SourcesDirectory)$(projPath)/$(covFolder)/
        displayName: 'Coverity: Upload'
